/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all categories */
        get: operations["CategoriesController_getCategories"];
        put?: never;
        /** Create a new category */
        post: operations["CategoriesController_saveCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a category by ID */
        get: operations["CategoriesController_getCategory"];
        /** Update an existing category */
        put: operations["CategoriesController_updateCategory"];
        post?: never;
        /** Delete a category */
        delete: operations["CategoriesController_deleteCategory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all available products */
        get: operations["ProductsController_getProducts"];
        put?: never;
        /** Create a new product */
        post: operations["ProductsController_saveProduct"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a product by ID */
        get: operations["ProductsController_getProduct"];
        /** Update an existing product */
        put: operations["ProductsController_updateProduct"];
        post?: never;
        /** Delete a product */
        delete: operations["ProductsController_deleteProduct"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/slug/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a product by ID */
        get: operations["ProductsController_getProductBySlug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/seeder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Load products from seeder */
        post: operations["ProductsController_addProducts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of users */
        get: operations["UsersController_getUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a user by ID */
        get: operations["UsersController_getUser"];
        /** Update an existing user */
        put: operations["UsersController_updateUser"];
        post?: never;
        /** Delete a user */
        delete: operations["UsersController_deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a order by ID */
        get: operations["OrdersController_getOrder"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a order */
        post: operations["OrdersController_addOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/sign-up": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user */
        post: operations["AuthController_signUp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authenticate a user */
        post: operations["AuthController_signIn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ProductResponseDto: {
            /**
             * Format: uuid
             * @description Product ID
             */
            id: string;
            /**
             * @description Product name
             * @example Smartphone X
             */
            name: string;
            /**
             * @description Product description
             * @example A high-end smartphone with advanced features.
             */
            description: string;
            /**
             * @description Product slug
             * @example smartphone-x
             */
            slug: string;
            /**
             * @description Product price
             * @example 599.99
             */
            price: number;
            /**
             * @description Available stock
             * @example 100
             */
            stock: number;
            /**
             * @description Product image URL
             * @example https://example.com/images/smartphone-x.jpg
             */
            imgUrl: string;
            /**
             * Format: uuid
             * @description ID of the category to which the product belongs
             */
            categoryId: string;
        };
        CategoryResponseDto: {
            /**
             * Format: uuid
             * @description Category ID
             */
            id: string;
            /**
             * @description Category name.
             * @example Smartphones
             */
            name: string;
            products: components["schemas"]["ProductResponseDto"][];
        };
        CreateCategoryDto: {
            /**
             * @description The category's name.
             * @example Smartphones
             */
            name: string;
        };
        SaveCategoryResponseDto: {
            /**
             * Format: uuid
             * @description Category ID
             */
            id: string;
            /**
             * @description Category name.
             * @example Smartphones
             */
            name: string;
        };
        UpdateCategoryResponse: {
            /**
             * @description Indicates if the operation was successful
             * @example true
             */
            success: boolean;
            /** @description The updated product */
            category: components["schemas"]["SaveCategoryResponseDto"];
        };
        CreateProductDto: {
            /**
             * @description The name of the product
             * @example Smartphone X
             */
            name: string;
            /**
             * @description The description of the product
             * @example A high-end smartphone with advanced features.
             */
            description: string;
            /**
             * @description The price of the product. Must be a decimal number with up to 2 decimal places.
             * @example 599.99
             */
            price: number;
            /**
             * @description The stock quantity of the product
             * @example 100
             */
            stock: number;
            /**
             * @description The URL of the product image
             * @example https://example.com/images/smartphone-x.jpg
             */
            imgUrl: string;
            /**
             * Format: uuid
             * @description ID of the category to which the product belongs
             */
            categoryId: string;
        };
        UpdateProductDto: {
            /**
             * @description The name of the product
             * @example Smartphone X
             */
            name?: string;
            /**
             * @description The description of the product
             * @example A high-end smartphone with advanced features.
             */
            description?: string;
            /**
             * @description The price of the product. Must be a decimal number with up to 2 decimal places.
             * @example 599.99
             */
            price?: number;
            /**
             * @description The stock quantity of the product
             * @example 100
             */
            stock?: number;
            /**
             * @description The URL of the product image
             * @example https://example.com/images/smartphone-x.jpg
             */
            imgUrl?: string;
            /** @description ID of the category to which the product belongs */
            categoryId?: string;
        };
        UpdateProductResponse: {
            /**
             * @description Indicates if the operation was successful
             * @example true
             */
            success: boolean;
            /** @description The updated product */
            product: components["schemas"]["ProductResponseDto"];
        };
        LoadProductsResponseDto: {
            /**
             * @description Indicates if the operation was successful
             * @example true
             */
            success: boolean;
            /** @description The loaded products from the seed */
            products: components["schemas"]["ProductResponseDto"][];
        };
        OrderResponseDto: {
            /**
             * Format: uuid
             * @description Order UUID
             */
            id: string;
            /**
             * Format: date-time
             * @description Date when the order was created
             * @example 2023-10-01
             */
            date: string;
            /**
             * @description UUID of the user who placed the order
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            userId: string;
            /**
             * Format: uuid
             * @description UUID of the order details entity
             */
            orderDetailsId: string;
        };
        UserResponseDto: {
            /**
             * Format: uuid
             * @description User UUID
             */
            id: string;
            /**
             * @description User full name
             * @example John Doe
             */
            name: string;
            /**
             * @description User email address
             * @example john.doe@example.com
             */
            email: string;
            /**
             * @description User phone number
             * @example 1234567890
             */
            phone?: number;
            /**
             * @description User country
             * @example United States
             */
            country?: string;
            /**
             * @description User address
             * @example 123 Main St, Springfield
             */
            address?: string;
            /**
             * @description User city
             * @example Springfield
             */
            city?: string;
            /**
             * @description Indicates if the user is an administrator
             * @example false
             */
            isAdmin: boolean;
            /** @description List of orders associated with the user */
            orders: components["schemas"]["OrderResponseDto"][];
        };
        PaginatedUsersResponseDto: {
            /** @description List of users */
            users: components["schemas"]["UserResponseDto"][];
            /**
             * @description Current page number
             * @example 1
             */
            page: number;
            /**
             * @description Number of items per page
             * @example 10
             */
            limit: number;
        };
        UpdateUserDto: {
            /**
             * @description The full name of the user
             * @example John Doe
             */
            name?: string;
            /**
             * @description The email address of the user
             * @example john.doe@example.com
             */
            email?: string;
            /**
             * @description The address of the user
             * @example 123 Main St
             */
            address?: string;
            /**
             * @description The phone number of the user
             * @example 1234567890
             */
            phone?: number;
            /**
             * @description The country of residence of the user
             * @example United States
             */
            country?: string;
            /**
             * @description The city of residence of the user
             * @example New York
             */
            city?: string;
            /**
             * @description Indicates if the user is an administrator
             * @example false
             */
            admin?: boolean;
        };
        UpdateUserResponse: {
            /**
             * @description Indicates if the operation was successful
             * @example true
             */
            success: boolean;
            /** @description The updated user */
            user: components["schemas"]["UserResponseDto"];
        };
        Products: {
            /** Format: uuid */
            id: string;
        };
        CreateOrderDto: {
            /**
             * Format: uuid
             * @description The UUID of the user who is making the order.
             */
            userId: string;
            /** @description An array of the products ID's of the current order. */
            products: components["schemas"]["Products"][];
        };
        OrderDataDto: {
            /**
             * @description The price of the order
             * @example 100.5
             */
            price: number;
            /**
             * Format: uuid
             * @description The ID of the order details
             */
            orderDetailsId: string;
        };
        CreateOrderResponseDto: {
            data: components["schemas"]["OrderDataDto"];
        };
        CreateUserDto: {
            /**
             * @description The full name of the user
             * @example John Doe
             */
            name: string;
            /**
             * Format: email
             * @description The email address of the user
             * @example john.doe@example.com
             */
            email: string;
            /**
             * @description The password for the user account. It must contain at least one lowercase letter, one uppercase letter, one number, and one special character.
             * @example Password123!
             */
            password: string;
            /**
             * @description The confirmation of the password. It must match the password field.
             * @example Password123!
             */
            confirmPassword: string;
            /**
             * @description The address of the user (optional)
             * @example 123 Main St
             */
            address?: string;
            /**
             * @description The phone number of the user (optional)
             * @example 1234567890
             */
            phone?: number;
            /**
             * @description The country of residence of the user (optional)
             * @example United States
             */
            country?: string;
            /**
             * @description The city of residence of the user (optional)
             * @example New York
             */
            city?: string;
        };
        NewUserResponseDto: {
            /**
             * Format: uuid
             * @description User UUID
             */
            id: string;
            /**
             * @description User full name
             * @example John Doe
             */
            name: string;
            /**
             * @description User email address
             * @example john.doe@example.com
             */
            email: string;
            /**
             * @description User phone number
             * @example 1234567890
             */
            phone?: number;
            /**
             * @description User country
             * @example United States
             */
            country?: string;
            /**
             * @description User address
             * @example 123 Main St, Springfield
             */
            address?: string;
            /**
             * @description User city
             * @example Springfield
             */
            city?: string;
            /**
             * @description Indicates if the user is an administrator
             * @example false
             */
            isAdmin: boolean;
        };
        SignUpResponseDto: {
            /**
             * @description Indicates if the operation was successful
             * @example true
             */
            success: boolean;
            /** @description The created user */
            user: components["schemas"]["NewUserResponseDto"];
        };
        LoginUserDto: {
            /** Format: email */
            email: string;
            password: string;
        };
        SignInResponseDto: {
            /**
             * @description Indicates if the operation was successful
             * @example true
             */
            success: boolean;
            /** @description The JWT Token of the user */
            token: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    CategoriesController_getCategories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryResponseDto"][];
                };
            };
        };
    };
    CategoriesController_saveCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Data for creating a category */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCategoryDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SaveCategoryResponseDto"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoriesController_getCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the category */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryResponseDto"];
                };
            };
            /** @description Category not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoriesController_updateCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the category to update */
                id: string;
            };
            cookie?: never;
        };
        /** @description Data for updating the category */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCategoryDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateCategoryResponse"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Category not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoriesController_deleteCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the category to delete */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Category deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Category not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsController_getProducts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductResponseDto"][];
                };
            };
        };
    };
    ProductsController_saveProduct: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Data for creating a product */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProductDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductResponseDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsController_getProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the product */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductResponseDto"];
                };
            };
            /** @description Product not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsController_updateProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the product to update */
                id: string;
            };
            cookie?: never;
        };
        /** @description Data for updating the product */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProductDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateProductResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Product not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsController_deleteProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the product to delete */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Product deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Product not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsController_getProductBySlug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                /** @description ID of the product */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductResponseDto"];
                };
            };
            /** @description Product not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsController_addProducts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoadProductsResponseDto"];
                };
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getUsers: {
        parameters: {
            query?: {
                /** @description Page number for pagination */
                page?: number;
                /** @description Number of items per page */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUsersResponseDto"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user to update */
                id: string;
            };
            cookie?: never;
        };
        /** @description Data for updating the user */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateUserResponse"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the user to delete */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrdersController_getOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the order */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderResponseDto"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrdersController_addOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Data for creating a order */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrderDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateOrderResponseDto"];
                };
            };
            /** @description This products are not available. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description There was an error processing the order. Try again later. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_signUp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Data for creating a new user */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignUpResponseDto"];
                };
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_signIn: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User credentials for authentication */
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignInResponseDto"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
